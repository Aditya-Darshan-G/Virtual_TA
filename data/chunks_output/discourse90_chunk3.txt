key=lambda x: x[1], reverse=True)

 # Return the top 3 most similar documents
 top_matches = [doc for doc, _ in sorted_docs[:3]]
 
 return {"matches": top_matches} for Q8 from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict, Any
import re

# Create the FastAPI app
app = FastAPI()

# CORS configuration to allow any origin
app.add_middleware(
 CORSMiddleware,
 allow_origins=["*"], # Allows all origins
 allow_credentials=True,
 allow_methods=["*"], # Allows all methods (GET, POST, etc.)
 allow_headers=["*"], # Allows all headers
)
def get_ticket_status(ticket_id: int) -> Dict[str, Any]:
 # Mock response for illustration purposes
 return {"ticket_id": ticket_id, "status": "open"}

def schedule_meeting(date: str, time: str, meeting_room: str) -> Dict[str, Any]:
 # Mock response for illustration purposes
 return {"date": date, "time": time, "meeting_room": meeting_room, "status": "scheduled"}

def g

---

