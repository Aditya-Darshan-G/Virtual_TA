ON functions Command-line JSON Processing with jq jq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines. Example: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process. ```bash Extract specific fields from JSONL cat data.jsonl | jq -c 'select(.type == "user") | {id, name}' Transform JSON structure cat data.json | jq '.items[] | {name: .name, count: .details.count}' Filter and aggregate cat events.jsonl | jq -s 'group_by(.category) | map({category: .[0].category, count: length})'
``` JMESPath Queries JMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It's a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.

---

