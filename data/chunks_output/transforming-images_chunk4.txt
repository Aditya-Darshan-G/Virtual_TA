aw.Draw(img)
 font = ImageFont.truetype("arial.ttf", font_size) # Calculate text size and position
text_bbox = draw.textbbox((0, 0), text, font=font)
text_width = text_bbox[2] - text_bbox[0]
text_height = text_bbox[3] - text_bbox[1]

# Position text at bottom-right
x = img.width - text_width - 10
y = img.height - text_height - 10

# Add text with shadow
draw.text((x+2, y+2), text, font=font, fill='black')
draw.text((x, y), text, font=font, fill='white')

return img ``` Memory-Efficient Processing Handle large images without loading them entirely into memory: ```python
from PIL import Image
import os async def process_large_images(
 input_dir: str,
 output_dir: str,
 max_size: tuple[int, int]
) -> None:
 """Process multiple large images efficiently."""
 os.makedirs(output_dir, exist_ok=True) for filename in os.listdir(input_dir):
 if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):
 continue

 input_path = os.path.join(input_dir, filename)
 output_path = os.path.join(output_dir

---

