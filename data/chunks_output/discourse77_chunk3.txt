"
 },
 json={
 "model": "gpt-4o-mini",
 "messages": [
 {
 "role": "user",
 "content": user_input
 }
 ],
 "tools": tools,
 "tool_choice": "auto"
 }
 )
 return response.json()

@app.get("/")
def home():
 return {"Hello": "World"}

@app.get("/read")
def read_file(path: str):
 try:
 with open(path, "r") as f:
 return f.read()
 except Exception as e:
 raise HTTPException(status_code=404, detail="File does not exist")

@app.post("/run")
async def run(task: str):
 query = query_gpt(task)
 print(query) # Print the full response to inspect it.
 
 if 'choices' not in query:
 raise HTTPException(status_code=500, detail="Invalid response format from GPT API")
 
 try:
 tool_calls = query['choices'][0]['message'].get('tool_calls', [])
 if tool_calls:
 func_name = tool_calls[0]['function']['name']
 args = json.loads(tool_calls[0]['function']['arguments'])
 
 # Map function names to their respective functions
 function_map = {
 "cakebake": cakebake,
 "install_uv_and_run_datagen": install_uv_and_run_da

---

